#+TITLE: Programming Language Modes

If any get too big, I'll put it in a separate file and load it from here.

* General Programming Mode
#+BEGIN_SRC emacs-lisp
  (defun prepare-to-program ()
           "Set up a general programming environment"
           (flyspell-prog-mode)
           (setq indent-tabs-mode nil)
           (line-tail-highlight)
           (show-paren-mode)
           (auto-fill-mode)
           (subword-mode)
           (setq comment-auto-fill-only-comments t)
           (highlight-current-line-minor-mode)
           (light-symbol-mode))
  
         (add-hook 'prog-mode-hook 'prepare-to-program)
  
       ;; Close the compilation window if there was no error at all.
       (setq compilation-exit-message-function
             (lambda (status code msg)
               ;; If M-x compile exists with a 0
               (when (and (eq status 'exit) (zerop code))
                 ;; then bury the *compilation* buffer, so that C-x b
                 ;; doesn't go there
                 (bury-buffer "*compilation*")
                 ;; and return to whatever were looking at before
                 (replace-buffer-in-windows "*compilation*"))
               ;; Always return the anticipated result of
               ;; compilation-exit-message-function
               (cons msg code)))
#+END_SRC

* General Flymake stuff
#+BEGIN_SRC emacs-lisp
  (require 'flymake)
  ;; Overwrite flymake-display-warning so that no annoying dialog box is
  ;; used.

  ;; This doesn't seem to work:
  ;; Using lwarn might be kind of annoying on its own, popping up windows and
  ;; what not. If you prefer to recieve the warnings in the mini-buffer, use:
  (defun flymake-display-warning (warning)
    "Display a warning to the user, using lwarn"
    (message warning))

  (custom-set-variables
   '(flymake-gui-warnings-enabled nil)
   '(help-at-pt-timer-delay 0.9)
   '(help-at-pt-display-when-idle (quote (flymake-overlay)) nil (help-at-pt)))'

  (defun my-flymake-show-next-error()
    (interactive)
    (flymake-goto-next-error)
    (flymake-display-err-menu-for-current-line))

  (add-hook 'prog-mode-hook
            (lambda ()
              (flymake-mode t)
              (global-set-key "\M-p" 'flymake-goto-prev-error)
              (global-set-key "\M-n" 'flymake-goto-next-error)))

#+END_SRC
* C
#+BEGIN_SRC emacs-lisp
  (add-to-list 'flymake-allowed-file-name-masks
               '(".+\\.c$" flymake-simple-make-init
                 flymake-simple-cleanup flymake-get-real-file-name))

  ;(eval-after-load "cc-mode"
 ;(add-hook 'c-mode-hook electric-case-c-init))
#+END_SRC
* Cilk
#+BEGIN_SRC emacs-lisp
  ;; Add .cilk extension to c-mode
  (add-to-list 'auto-mode-alist '("\\.cilk\\'" . c-mode))
  (add-to-list 'auto-mode-alist '("\\.cilkh\\'" . c-mode))

  (add-to-list 'flymake-allowed-file-name-masks
               '(".+\\.cilk$" flymake-simple-make-init
                 flymake-simple-cleanup flymake-get-real-file-name))
#+END_SRC

* C++
#+BEGIN_SRC emacs-lisp
  (add-to-list 'flymake-allowed-file-name-masks
               '(".+\\.cpp$" flymake-simple-make-init
                 flymake-simple-cleanup flymake-get-real-file-name))
#+END_SRC
* C common
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
            '(lambda ()
               (c-toggle-syntactic-indentation 1)
               (setq c-basic-offset 2)
               (setq c-set-style "Linux")
               (c-toggle-hungry-state 1)
               (c-toggle-electric-state 1)))
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  ;; pyflakes+flymake
  (when (load "flymake" t)
    (defun flymake-pyflakes-init ()
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list "pyflakes" (list local-file))))

    (add-to-list 'flymake-allowed-file-name-masks
                 '("\\.py\\'" flymake-pyflakes-init)))


  (add-hook 'find-file-hook 'flymake-find-file-hook)
  (add-hook 'python-mode-hook 'flymake-pyflakes-init)
  (add-hook 'python-mode-hook
            (lambda ()
              ; (setq indent-tabs-mode t)
              (setq tab-width 4)
              (setq python-indent 4)))

  (when (executable-find "ipython")
    (setq
     python-shell-interpreter "ipython"
     python-shell-interpreter-args ""
     python-shell-prompt-regexp "In \\[[0-9]+\\]: "
     python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
     python-shell-completion-setup-code
     "from IPython.core.completerlib import module_completion"
     python-shell-completion-module-string-code
     "';'.join(module_completion('''%s'''))\n"
     python-shell-completion-string-code
     "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))
#+END_SRC

* Shell
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'shell-mode-hook 'shell-mode-init)

  ;; (defun shell-mode-init()
  ;;  (interactive)
  ;;  (ansi-color-for-comint-mode-on)
  ;;  (setq sh-basic-offset 2))

#+END_SRC

* Octave
#+BEGIN_SRC emacs-lisp
; Not sure what this does
(autoload 'octave-mode "octave-mod" nil t)

; Load octave mode for matlab
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))

(add-hook 'octave-mode-hook
	  (lambda ()
	    (abbrev-mode 1)
	    (auto-fill-mode 1)
	    (if (eq window-system 'x)
		(font-lock-mode 1))))

#+END_SRC
* Java
#+BEGIN_SRC emacs-lisp
  (defun rob/java-flymake-init()
    (list "javac" (list (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-with-folder-structure))))

  (add-to-list 'flymake-allowed-file-name-masks '("\\.java$"
                                                  rob/java-flymake-init flymake-simple-cleanup))
#+END_SRC
* Lisp
#+BEGIN_SRC emacs-lisp

#+END_SRC

* LaTeX
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'flymake-allowed-file-name-masks
  ;;              '(".+\\.tex$" flymake-simple-make-init
  ;;                flymake-simple-cleanup flymake-get-real-file-name))

  ;;(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
#+END_SRC
* Makefiles
#+BEGIN_SRC emacs-lisp
  (add-hook 'makefile-mode-hook
            (lambda()
              (setq indent-tabs-mode t)))
#+END_SRC emacs-lisp
* CSS
#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook 'css-mode-init)

  (defun css-mode-init()
   (interactive)
   (setq css-indent-offset 2))

#+END_SRC emacs-lisp
* R
#+BEGIN_SRC emacs-lisp
  (require 'ess-site)
#+END_SRC emacs-lisp
* Git Commit
#+BEGIN_SRC emacs-lisp
  (defun rob/prepare-to-commit ()
    (interactive)
    (flyspell-mode 1)
    (longlines-mode 1)
    (setq fill-column 72))

    (add-hook 'git-commit-mode-hook 'rob/prepare-to-commit)
#+END_SRC
