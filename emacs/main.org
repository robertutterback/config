#+TITLE: My Emacs Customizations
#+OPTIONS: toc:2 num:nil ^:nil

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

  My emacs setup. Right now heavily based on the Emacs Starter Kit.

* Basic Setup
- Load path
  #+name: load-paths
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path config-dir)
    ;(setq autoload-file (concat config-dir "loaddefs.el")) ; what's this for?***
    (setq custom-file (concat config-dir "custom.el"))
    (setq enable-recursive-minibuffers t)
  #+END_SRC
- Commonly used packages to be loaded on startup
  #+name: load-on-startup
  #+BEGIN_SRC emacs-lisp
    (require 'cl)
    (require 'saveplace)
    (require 'ffap)
    (require 'uniquify)
    (require 'ansi-color)
    (require 'recentf)
    (require 'linum)
  #+END_SRC
- Miscellaneous Preferences (move?) 
  #+BEGIN_SRC emacs-lisp
    (ido-mode 1)
    (recentf-mode 1)
    (menu-bar-mode -1)
    (setq linum-format "%4d \u2502 ")
    (line-number-mode 1)
    (column-number-mode 1) ;; Line numbers on left most column
    (global-linum-mode 1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq read-file-name-completion-ignore-case t)
    (setq shell-file-name "bash")
    (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
    (add-hook 'message-mode-hook 'turn-on-flyspell)
    (setq visible-bell t)
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
                                            ;(setq scroll-margin 10) ; scroll much sooner
                                            ;(setq scroll-conservatively 5) ; scroll the minimum amount
    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  #+END_SRC
- Remote Editing
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (setq tramp-debug-buffer t)
  (setq tramp-verbose 10)
  (setq tramp-copy-size-limit -1)
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

  ; Run an edit server so that I can edit from Chrome
  ; This is silly to have to do this, but Chrome does not allow executing a new process.
  ; I've been meaning to switch to Firefox...

  ;; (when (and (require 'edit-server nil t) (daemonp))
  ;;   (edit-server-start))
	(when (and (daemonp) (locate-library "edit-server"))
   (require 'edit-server)
	 (autoload 'edit-server-maybe-dehtmlize-buffer "edit-server-htmlize" "edit-server-htmlize" t)
	 (autoload 'edit-server-maybe-htmlize-buffer   "edit-server-htmlize" "edit-server-htmlize" t)
	 (add-hook 'edit-server-start-hook 'edit-server-maybe-dehtmlize-buffer)
	 (add-hook 'edit-server-done-hook  'edit-server-maybe-htmlize-buffer)
   (edit-server-start))

  (setq edit-server-url-major-mode-alist
        '(("github\\.com" . markdown-mode)))

#+END_SRC
* Core Files
  :PROPERTIES:
  :CUSTOM_ID: core
  :END:
See each file for a description.
#+BEGIN_SRC emacs-lisp
      (org-babel-load-file (expand-file-name "web.org" config-dir))
      (org-babel-load-file (expand-file-name "vc.org" config-dir))
      (org-babel-load-file (expand-file-name "packages.org" config-dir))
      (org-babel-load-file (expand-file-name "defuns.org" config-dir))
      (org-babel-load-file (expand-file-name "global-keys.org" config-dir))
      (org-babel-load-file (expand-file-name "tabs.org" config-dir))
      (org-babel-load-file (expand-file-name "prog-mode.org" config-dir))
      (org-babel-load-file (expand-file-name "org-mode.org" config-dir))
      (org-babel-load-file (expand-file-name "misc.org" config-dir))
      ;(org-babel-load-file (expand-file-name "registers.org" config-dir))
      (org-babel-load-file (expand-file-name "rob.org" config-dir))
      (org-babel-load-file (expand-file-name "appearance.org" config-dir))
#+END_SRC
* Other Files
#+BEGIN_SRC emacs-lisp
;  (load "~/.emacs.d/private.el")
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  ;; (require 'helm-config)
  ;; (helm-mode 1)
  (add-hook
   'after-init-hook
   (lambda ()
     (require 'helm-config)
     (helm-mode 1)))
#+END_SRC
* Load User/System Specific Files
** System/User specific customizations
   You can keep system- and user-specific customizations here, either as raw emacs-lisp 
   files or as embedded elisp in org-mode files (as done in this document).

   Elisp source should be kept in the =src= directory.  Packages loaded
   from here will override those installed by ELPA.  This is useful if
   you want to track the development versions of a project, or if a
   project is not in elpa.

   After we've loaded all the defaults, let's load more specific stuff.
   #+name: load-files
   #+BEGIN_SRC emacs-lisp
   (cl-flet ((load-file (base)
            (let* ((path          (expand-file-name base config-dir))
                   (literate      (concat path ".org"))
                   (encrypted-org (concat path ".org.gpg"))
                   (plain         (concat path ".el"))
                   (encrypted-el  (concat path ".el.gpg")))
              (cond
               ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
               ((file-exists-p encrypted-el)  (load encrypted-el))
               ((file-exists-p literate)      (org-babel-load-file literate))
               ((file-exists-p plain)         (load plain)))))
          (remove-extension (name)
            (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
         (match-string 1 name)))
     (let ((elisp-dir (expand-file-name "src" config-dir))
           (user-dir (expand-file-name user-login-name config-dir)))
       ;; add the src directory to the load path
       (add-to-list 'load-path elisp-dir)
       ;; load specific files
       (when (file-exists-p elisp-dir)
         (let ((default-directory elisp-dir))
           (normal-top-level-add-subdirs-to-load-path)))
       ;; load system-specific config
       (load-file system-name)
       ;; load system-type-specific config
       (cond ((equal system-type 'darwin) (load-file "mac"))
             ((equal system-type 'gnu/linux) (load-file "linux")))
       ;; load user-specific config
       (load-file user-login-name)
       ;; load any files in the user's directory
       (when (file-exists-p user-dir)
        (add-to-list 'load-path user-dir)
         (mapc #'load-file
               (remove-duplicates
                (mapcar #'remove-extension
                        (directory-files user-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
                :test #'string=)))))
   #+END_SRC

** Settings from M-x customize
   #+name: m-x-customize-customizations
   #+BEGIN_SRC emacs-lisp
  (load custom-file 'noerror)
   #+END_SRC

** Yasnippet
- Initialize
#+BEGIN_SRC emacs-lisp
    (require 'yasnippet)
    (setq yas/load-directory (expand-file-name "snippets" config-dir))
    (yas-global-mode 1)
#+END_SRC
-   The latest version of yasnippets doesn't play well with Org-mode, the
		following function allows these two to play nicely together.
#+BEGIN_SRC emacs-lisp
;    (defun yas/org-very-safe-expand ()
;      (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
   
;    (defun yas/org-setup ()
      ;; yasnippet (using the new org-cycle hooks)
;      (make-variable-buffer-local 'yas/trigger-key)
;      (setq yas/trigger-key [tab])
;      (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
;      (define-key yas/keymap [tab] 'yas/next-field))
    
;    (add-hook 'org-mode-hook #'yas/org-setup)
  #+END_SRC
		
* Improvements
  :PROPERTIES:
  :CUSTOM_ID: todo
  :END:
** Packages to mess around with/utilize:
*** TODO electric case (new-function => new_function)
*** TODO string-inflection (underscore => UPCASE => camelCase)
*** TODO Switch to aspell:
#+BEGIN_SRC emacs-lisp
  ;; (setq ispell-program-name "aspell")
  ;;   ;; -C makes aspell accept run-together words
  ;;   ;; --run-together-limit is maximum number of words that can be strung together.
  ;;   (setq ispell-extra-args '("-C" "--sug-mode=ultra" "--run-together-limit=5"))
#+END_SRC
** TODO Smex package
** TODO Make everything look pretty in the org files
- Especially the way code is displayed
** TODO Add an org-mode hook for flyspell
- Will flyspell-prog-mode work well to ignore things like #+STARTUP: showall?
** TODO Configure/learn to use YASNIPPET
** TODO Use new, Better flymake configure it
* Resources
  :PROPERTIES:
  :CUSTOM_ID: resources
  :END:
  [[http://emacswiki.org][Emacs Wiki]]
