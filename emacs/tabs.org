#+TITLE: Tab Management

Adapted from tabs.el by Ryan McGeary
github.com/rmm5t/dotfiles/emacs.d/rmm5t/tabs.el

#+BEGIN_SRC emacs-lisp
  ;; Spaces instead of tabs
  ;(setq-default indent-tabs-mode nil)

  ;; If there is a tab, make it the size of 2 spaces
  (setq-default tab-width 2)
#+END_SRC

* Hippie Expand. Groovy vans with tie-dyes.
#+BEGIN_SRC emacs-lisp
  (setq hippie-expand-try-functions-list
        '(yas-hippie-try-expand
          try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-file-name
          try-complete-lisp-symbol))
#+END_SRC

* Smart Tab
	Borrowed from snippets [[http://www.emacswiki.org/emacs/TabCompletion][here]]
#+BEGIN_SRC emacs-lisp
  (defvar smart-tab-using-hippie-expand t
    "turn this on if you want to use hippie-expand completion.")
  
  (defun smart-tab (prefix)
    "Needs `transient-mark-mode' to be on. This smart tab is
    minibuffer compliant: it acts as usual in the minibuffer.
  
    In all other buffers: if PREFIX is \\[universal-argument], calls
    `smart-indent'. Else if point is at the end of a symbol,
    expands it. Else calls `smart-indent'."
    (interactive "P")
    (cl-labels ((smart-tab-must-expand (&optional prefix)
                                    (unless (or (consp prefix)
                                                mark-active)
                                      (looking-at "\\_>"))))
      (cond ((minibufferp)
             (minibuffer-complete))
            ((smart-tab-must-expand prefix)
             (if smart-tab-using-hippie-expand
                 (hippie-expand prefix)
               (dabbrev-expand prefix)))
            ((smart-indent)))))
  
  (defun smart-indent ()
    "Indents region if mark is active, or current line otherwise."
    (interactive)
    (if mark-active
      (indent-region (region-beginning)
                     (region-end))
      (indent-for-tab-command)))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC
