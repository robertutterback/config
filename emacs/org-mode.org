#+TITLE: ORG Mode Customizations
* Initial Setup
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
  (setq org-agenda-files (list (concat org-directory "/work.org")
                               (concat org-directory "/me.org")
                               (concat org-directory "/media.org")
                               (concat org-directory "/shop.org")
                               (concat org-directory "/discuss.org")
                               (concat org-directory "/ref.org")
                               (concat org-directory "/journal.org")
                               (concat org-directory "/refile.org")))
  (setq org-default-notes-file (concat org-directory "/refile.org"))
  (setq org-archive-location (concat org-directory "/archive.org" "::" "* From %s"))
  
  (setq org-return-follows-link t)
#+END_SRC
* Journal
- From [[http://metajack.im/2009/01/01/journaling-with-emacs-orgmode/][here]]
#+BEGIN_SRC emacs-lisp
  (defvar org-journal-file (concat org-directory "/journal.org")
    "Path to OrgMode journal file.")
  (defvar org-journal-date-format "%Y-%m-%d"
    "Date format string for journal headings.")

  (defun org-journal-entry ()
    "Create a new diary entry for today or append to an existing one."
    (interactive)
    (switch-to-buffer (find-file org-journal-file))
    (widen)
    (let ((today (format-time-string org-journal-date-format)))
      (beginning-of-buffer)
      (unless (org-goto-local-search-headings today nil t)
        ((lambda ()
           (org-insert-heading)
           (insert today)
           (insert "\n\n  \n"))))
      (beginning-of-buffer)
      (org-show-entry)
      (org-narrow-to-subtree)
      (end-of-buffer)
      (backward-char 2)
      (unless (= (current-column) 2)
        (insert "\n\n  "))))
#+END_SRC
* Mobile Setup
#+BEGIN_SRC emacs-lisp
  (setq org-mobile-directory "~/org/mobile")
  (setq org-mobile-inbox-for-pull (concat org-directory "/index.org"))
#+END_SRC
* Agenda Management
#+BEGIN_SRC emacs-lisp
	(setq org-agenda-skip-scheduled-if-done t)
	(setq org-agenda-skip-deadline-if-done t)

	;; Agenda display
	(setq org-agenda-span 10
				org-agenda-start-on-weekday nil
				org-agenda-start-day "-3d")

	;; Probably want to modify this later to selectively inherit some tags
	(setq org-use-tag-inheritance nil)

	(setq org-agenda-custom-commands
				'(("w" "Weekly tasks" tags "+weekly")
					("W" "Waiting tasks" todo-tree "WAITING")
					("c" "Cleaning tasks" tags "+cleaning")
					("d" "Daily tasks" tags "+daily")
					("l" "Everything but daily tasks"
					 ((agenda "" ((org-agenda-skip-function
												 '(org-agenda-skip-entry-if 'regexp ":daily:"))
												(org-agenda-ndays 5)))))))

	(setq org-todo-keywords
				(quote ((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i)" "|" "DONE(d)")
								(sequence "WAITING(w@/!)" "HOLD(h@/!)" "|"
													"CANCELLED(c@/!)"))))

	(setq org-todo-keyword-faces
				(quote (("TODO" :foreground "red" :weight bold)
								("NEXT" :foreground "blue" :weight bold)
								("IN-PROGRESS" :foreground "yellow" :weight bold)
								("DONE" :foreground "forest green" :weight bold)
								("WAITING" :foreground "orange" :weight bold)
								("HOLD" :foreground "magenta" :weight bold)
								("CANCELLED" :foreground "forest green" :weight bold))))
	(setq org-todo-state-tags-triggers
				(quote (("CANCELLED" ("CANCELLED" . t))
								("WAITING" ("WAITING" . t))
								("HOLD" ("WAITING" . t) ("HOLD" . t))
								(done ("WAITING") ("HOLD"))
								("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
								("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
								("IN-PROGRESS" ("WAITING") ("CANCELLED") ("HOLD") ("NEXT"))
								("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
* Tracking Habits
#+BEGIN_SRC emacs-lisp
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 80)
  (setq org-log-into-drawer "LOGBOOK")
#+END_SRC
* Time Tracking
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-modules 'org-timer)
  (setq org-timer-default-timer 25)

  (add-hook 'org-after-todo-state-change-hook 'my-todo-state-change)
  (defun my-todo-state-change ()
    (when (string-equal org-state "IN-PROGRESS")
      (org-clock-in)))
#+END_SRC
* Habitica
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat config-dir "habitrpg/habitrpg"))
  (require 'habitrpg) ;; API key/token set in private.org


  (add-hook 'org-after-todo-state-change-hook 'habitrpg-change-existing 'append)
  ;; For adding tasks from org mode
  (global-set-key (kbd "C-c C-x h") 'habitrpg-add)
  ;; Status buffer - use C-h m to see the keybindings
  ;; C-c C-c - upvote task or buy reward
  ;; C-c C-d - downvote task
  ;; t - bring up manage menu, which adds or deletes tasks
  (global-set-key (kbd "<f9> a") 'habitrpg-status)
  ;; Continuously update a habit attache to a clocking task
  ;;(add-hook 'org-clock-in-hook 'habitrpg-clock-in)
  ;;(add-hook 'org-clock-out-hook 'habitrpg-clock-out)
  ;; List of habits to check for when clocking a task
  ;;(add-to-list 'hrpg-tags-list "PROGRAMMING")
  ;;(add-to-list 'hrpg-tags-list "WORK")

  ;; I don't want to constantly be adding things to Habitica; I want to
  ;; manually mark things. So I'm making a new function based on
  ;; habitrpg-add, though I don't understand some parts of it.
  (defun habitrpg-change-existing ()
    "Change state of an existing habitica task."
    (interactive)
    (save-excursion
      (save-window-excursion
        (if (string= major-mode 'org-agenda-mode) (org-agenda-switch-to))
        (lexical-let* ((task (nth 4 (org-heading-components)))
                       (state (nth 2 (org-heading-components)))
                       (in-habit (org-entry-get-with-inheritance "IN_HABITRPG"))
                       (last-done-string
                        (if (org-is-habit-p (point))
                            (car (sort 
                                  (org-habit-done-dates
                                   (org-habit-parse-todo))
                                  '>)))
                        nil)
                       (last-done-day 
                        (if (and (member "hrpgdaily" (org-get-tags-at))
                                 last-done-string)
                            (butlast
                             (nthcdr 3
                                     (decode-time 
                                      (days-to-time last-done-string
                                                    ))) 4)
                          nil))
                       type)
          (habitrpg-get-id task
                           (lambda (id)
                             (when (or
                                    (and (equal last-done-day 
                                                (reverse (butlast (calendar-current-date))))
                                         (not (string= state "DONE")))
                                    (string= state "DONE"))
                               (habitrpg-upvote id)
                               (message "Task \"%s\" completed!" task))))))))
#+END_SRC
(defun org-clocking-p ()
  "Return t when clocking a task."
  (not (equal (org-clocking-buffer) nil)))

